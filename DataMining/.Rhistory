Da^2
#viendo solo una dimensión
plot(F[,1],0,type = "n")
#viendo solo una dimensión
plot(F[,1],rep(0,dim(F)[1]),type = "n")
text(F[,1],rep(0,dim(F)[1]),labels = lrow,col="red",cex=0.5+r*2)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n")
text(rep(0,dim(F)[1]),F[,1],labels = lrow,col="red",cex=0.5+r*2)
text(rep(0,dim(G)[1]),G[,1],labels = lcol,col="blue",cex=0.5+c*2)
abline(v=0,lty=2)
abline(h=0,v=0,lty=2)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n",ann = F)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n",axes = F)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n",axis = F)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n",axes = F)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n",axes = F)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n")
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n",axes = T)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n",axes = F)
#viendo solo una dimensión
plot(0,axes=F)
#viendo solo una dimensión
plot(0,axis=F)
#viendo solo una dimensión
plot(0,ann=F)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n", axes = F)
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n", axes = F)
dev.off()
dev.off()
dev.off()
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n", axes = F)
?plot
#viendo solo una dimensión
plot(rep(0,dim(F)[1]),F[,1],type = "n", axes = F)
F[,1]
rep(0,dim(F)[1])
plot(0,type = "n")
plot(0,type = "n",axes=F)
dev.off()
dev.off()
dev.off()
plot(0,type = "n",axes=F)
plot(0,type = "n",axes=F)
F
rm(F)
rm(list = ls())
library(ca)
#ejemplo ENDSA
load(url("https://github.com/AlvaroLimber/EST-384/raw/master/data/endsa.RData"))
ll<-attributes(endsa)
ll$var.labels
t1<-endsa %>% filter(year==2008) %>% select(7,14) %>% table()
t1<-t1[1:4,]
#test chi2
chisq.test(t1)
model<-ca(t1)
model
plot(model)
#programando el ca
lcol<-colnames(t1)
lrow<-rownames(t1)
P<-prop.table(t1)
r<-margin.table(P,1)
c<-margin.table(P,2)
Dr<-diag(r)
Dc<-diag(c)
##Paso 1
P-r%*%t(c)
#error en las matriz diagonales
Dr^(-0.5)%*%(P-r%*%t(c))%*% Dc^(-0.5)
# corrigiendo el problema
S<-diag(r^(-0.5))%*%(P-r%*%t(c))%*% diag(c^(-0.5))
# 2 descomposición SVD
svd(S)
U<-svd(S)$u
V<-svd(S)$v
Da<-diag(svd(S)$d)
#verificando las propiedades
U %*% t(U)
t(V) %*% V
U %*% Da %*% t(V)
S
# 3 Coordenadas principales filas
FF<- diag(r^(-0.5)) %*% U %*% Da
# 4 Coordenadas principales columnas
G<- diag(c^(-0.5)) %*% V %*% Da
# 5 Coordenadas estandar filas
X<- diag(r^(-0.5)) %*% U
# 6 Coordenadas estandar columnas
Y<- diag(c^(-0.5)) %*% V
# 7 inercia
sum(((P-r%*%t(c))**2)/(r%*%t(c)))
#graficando
xmin<-min(c(FF[,1],G[,1]))
xmax<-max(c(FF[,1],G[,1]))
ymin<-min(c(FF[,2],G[,2]))
ymax<-max(c(FF[,2],G[,2]))
plot(FF[,1],FF[,2],col="red",xlim=c(xmin,xmax)*1.5,ylim=c(ymin,ymax)*1.1)
points(G[,1],G[,2],col="blue")
abline(h=0,v=0,lty=2)
#incluyendo el texto
plot(FF[,1],FF[,2],xlim=c(xmin,xmax)*1.5,ylim=c(ymin,ymax)*1.1,type = "n")
text(FF[,1],FF[,2],labels = lrow,col="red",cex=0.7)
text(G[,1],G[,2],labels = lcol,col="blue",cex=0.7)
abline(h=0,v=0,lty=2)
#incluyendo mas información
plot(FF[,1],FF[,2],xlim=c(xmin,xmax)*1.5,ylim=c(ymin,ymax)*1.1,type = "n")
text(FF[,1],FF[,2],labels = lrow,col="red",cex=0.5+r*2)
text(G[,1],G[,2],labels = lcol,col="blue",cex=0.5+c*2)
abline(h=0,v=0,lty=2)
#viendo solo una dimensión
plot(rep(0,dim(FF)[1]),FF[,1],type = "n", axes = F)
axis(2)
text(rep(0,dim(FF)[1]),FF[,1],labels = lrow,col="red",cex=0.5+r*2)
text(rep(0,dim(G)[1]),G[,1],labels = lcol,col="blue",cex=0.5+c*2)
abline(h=0,v=0,lty=2)
abline(h=0,v=0,lty=2)
6000/400
6000/350
5000/350
3000/400
20000/8
x<-runif(100,40,90)
x
x<-runif(100,40,90)
x
x
x
mean(x)
sum(x)/100
x[order(x)]
median(x)
hist(x)
y<-rnorm(100,60,5)
hist(y)
y
sd(x)
sd(x)
sd(y)
x
plot(density(x))
plot(density(y))
hist(y)
plot(density(y))
plot(density(c(0,y)))
plot(density(c(y,200)))
plot(density(y))
plot(density(rnorm(10000)))
plot(density(rnorm(100000)))
plot(density(c(0,y)))
plot(density(c(y,200)))
plot(density(c(0,y)))
plot(density(c(y,200)))
plot(density(rnorm(100000)))
plot(density(runif(100000)))
plot(density(rnorm(100000,sd=0.5)))
par(mfrow=c(1,3))
par(mfrow=c(1,3))
plot(density(rnorm(100000,sd=0.5)),xlim=c(-3,3))
plot(density(rnorm(100000)),xlim=c(-3,3))
plot(density(runif(100000)))
par(mfrow=c(1,3))
plot(density(rnorm(100000,sd=0.5)),xlim=c(-5,5))
plot(density(rnorm(100000)),xlim=c(-5,5))
plot(density(runif(100000)))
par(mfrow=c(1,3))
plot(density(rnorm(100000,sd=0.5)),xlim=c(-5,5),ylim=c(0,0.8))
plot(density(rnorm(100000)),xlim=c(-5,5),ylim=c(0,0.8))
plot(density(runif(100000)))
x
1:25
2+4
sample(1,1:25)
sample(1,1:25)
sample(1:25,1)
sample(1:25,1)
sample(1:25,1)
sample(1:25,1)
rm(list=ls())
library(nortest)
library(foreign)
library(caret)
library(naivebayes)
######para texto
library(stringr)
#install.packages("textcat")
library(textcat)
setwd("C:\\Users\\ALVARO\\Documents\\GitHub\\OIM-text-mining\\data")
load("buscojobs_data.RData")
glimpse(bd2)
idioma<-textcat(bd2$text)
aux<-(idioma!="english" & idioma!="dutch" & idioma!="german")
bd2<-bd2[aux,]
bd2$text<-tolower(bd2$text)
bd2$r1<-str_detect(bd2$text,"sin exp")
bd2$r2<-str_detect(bd2$text,"senori")
bd2$r3<-str_detect(bd2$text,"buenos ingresos")
bd2$r4<-str_detect(bd2$text,"buena pre")
bd2$index<-apply(bd2[,4:7],1,mean)
bd2$class<-bd2$index>0.3
corpus <- Corpus(VectorSource(bd2$text))
inspect(corpus[1:3])
library(tm)
corpus <- Corpus(VectorSource(bd2$text))
inspect(corpus[1:3])
corpus.clean <- corpus %>%
tm_map(content_transformer(tolower)) %>%
tm_map(removePunctuation) %>%
tm_map(removeNumbers) %>%
tm_map(removeWords, stopwords(kind="es")) %>%
tm_map(stripWhitespace)
inspect(corpus.clean[1:3])
#The Document Term Matrix
dtm <- DocumentTermMatrix(corpus.clean)
inspect(dtm[40:50, 10:15])
library(mlr)
install.packages("mlr")
#install.packages("mlr")
library(mlr)
#install.packages("mlr")
library(mlr)
#install.packages("mlr")
install.packages("fastDummies")
library(mlr)
library(fastDummies)
letters(1:4)
letters
letters[1:4]
as.factor(letters[1:4])
as.tadata.frame(as.factor(letters[1:4]))
as.data.frame(as.factor(letters[1:4]))
bd<-as.data.frame(as.factor(letters[1:4]))
names(bd)
names(bd)<-"var"
createDummyFeatures(bd)
?createDummyFeatures(bd)
?createDummyFeatures(bd,"var")
createDummyFeatures(bd,"var")
createDummyFeatures(bd)
dummy_cols(bd,"var")
dummy_cols(bd,c("var","var"))
dummy_cols(bd,c("var"))
library(flexdashboard)
library(flexdashboard)
?gauge()
library(knitr)
library(flexdashboard)
setwd("C:\\Users\\ALVARO\\Downloads\\bd43 (1)\\SPSS")
rm(list = ls())
setwd("C:\\Users\\ALVARO\\Downloads\\bd43 (1)\\SPSS")
dir()
library(foreign)
rm(list = ls())
setwd("C:\\Users\\ALVARO\\Downloads\\bd43 (1)\\SPSS")
library(foreign)
eh18p<-read.spss("EH2018_Persona.sav")
?read.spss()
eh18p<-read.spss("EH2018_Persona.sav",to.data.frame = T)
knitr::opts_chunk$set(echo = TRUE)
load("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-384\\data\\endsa.RData")
load("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-384\\data\\endsa.RData")
library(dplyr)
endsa<-endsa %>% filter(year==2008)
attributes(endsa)
attributes(endsa)$var.labels
# 6, 7, 14
vv<-names(endsa)[c(6,7,14)]
table(endsa[,vv])
head(endsa[,vv])
library(mls)
library(fastDummies)
library(help=fastDummies)
?dummy_cols()
dummy_cols(endsa, "sexo")
dummy_cols(endsa, "sexo")
endsa<-endsa %>% select(vv)
#head(endsa[,vv])
library(help=fastDummies)
dummy_cols(endsa, "sexo")
dummy_cols(endsa,vv)
N<-dummy_cols(endsa,vv)
names(N)
N<-N[,-c(1:3)]
View(N)
N<-dummy_cols(endsa,vv)
head(N)
N<-N[,-c(1:3)]
head(N)
table(endsa[,vv[1:""]])
table(endsa[,vv[1:2]])
apply(N, 2, sum)
names(N)
N<-N[,-7]
#verificando que nos existan columnas con todos los valores en 0
apply(N, 2, sum)
## opcional
n<-sum(N)
n
n/3
P<-N/n
rr<-margin.table(P,1)
cc<-margin.table(P,2)
as.matrix(P)
P<-as.matrix(P)
rr<-margin.table(P,1)
cc<-margin.table(P,2)
S<-diag(rr^(-0.5)) %*% (P-rr %*%t (cc))%*%diag(cc^(-0.5))
#paso2
u<-svd(S)$u
v<-svd(S)$v
Da<-diag(svd(S)$d)
#paso 3
#Coordenadas principales de filas: $F=D_r^{-1/2} U D_{\alpha}$
FF<-diag(rr^(-0.5))%*% u %*%Da
#paso 4
#Coordenadas principales de filas: $G=D_c^{-1/2} V D_{\alpha}$
GG<-diag(cc^(-0.5))%*% v %*%Da
########################################
cumsum(svd(S)$d)/sum(svd(S)$d)
head(GG)
plot(GG[,1],GG[,2])
plot(GG[,1],GG[,2])
plot(GG[,1],GG[,2],type="n")
names(N)
#grafico 1
ll<-c("Mujer","Hombre","S/Educacion","Primaria","Secundaria","Superior",,"+pobre","pobre","c/media","rico","+rico")
#grafico 1
ll<-c("Mujer","Hombre","S/Educacion","Primaria","Secundaria","Superior","+pobre","pobre","c/media","rico","+rico")
text(GG[,1],GG[,2],labels = ll,cex=0.7)
points(FF[,1],FF[2],col="grey")
points(FF[,1],FF[,2],col="grey")
endsa
complete.cases(endsa)
endsa<-endsa[complete.cases(endsa),]
aux<-matrix(rnorm(100),nrow=5)
aux
dist(aux) #euclideana
dist(aux, method="manhattan")
dist(aux) #euclideana
dist(aux, method="manhattan")
dist(aux, method="minkowski", p=4)
dist(aux, method="minkowski", p=6)
dist(aux, method="minkowski", p=100)
dist(aux, method="minkowski", p=0.5)
dist(aux, method="minkowski", p=1)
dist(aux, method="manhattan")
dist(aux, method="minkowski", p=2)
dist(aux) #euclideana
dist(aux, method="minkowski", p=0.1)
dist(aux, method="minkowski", p=3)
aux
minkowski<-function(x,y,d){
dd<-(sum(abs(x-y)**d))**(1/d)
return(dd)
}
minkowski(c(1,2,3),c(4,2,1),p=1)
minkowski(c(1,2,3),c(4,2,1),d=1)
x-y
x<-c(1,2,3)
y<-c(4,2,1)
x-y
abs(x-y)
sum(abs(x-y))
minkowski(c(1,2,3),c(4,2,1),d=2)
sqrt(sum(abs(x-y)**2)) # euclideana
dist(aux)
dim(aux)
nf<-5
DD<-matrix(NA,nf-1,nf-1)
DD
colnames(DD)
colnames(DD)<-1:(nf-1)
DD
rownames(DD)<-2:nf
DD
d<-2
# la funcion de distancia
distancia<-function(bd,d=2){
nf<-dim(bd)[1]
DD<-matrix(NA,nf-1,nf-1)
colnames(DD)<-1:(nf-1)
rownames(DD)<-2:nf
for(i in 1:(nf-1)){
for(j in 2:nf){
DD[j-1,i]<-minkowski(bd[i,],bd[j,],d)
}
}
return(DD)
}
distancia(aux,p=2)
distancia(aux,d=2)
# la funcion de distancia
distancia<-function(bd,d=2){
nf<-dim(bd)[1]
DD<-matrix(NA,nf-1,nf-1)
colnames(DD)<-1:(nf-1)
rownames(DD)<-2:nf
for(i in 1:(nf-1)){
for(j in (i+1):nf){
DD[j-1,i]<-minkowski(bd[i,],bd[j,],d)
}
}
return(DD)
}
distancia(aux,d=2)
dist(aux)
DD<-matrix(,nf-1,nf-1)
# la funcion de distancia
distancia<-function(bd,d=2){
nf<-dim(bd)[1]
DD<-matrix(,nf-1,nf-1)
colnames(DD)<-1:(nf-1)
rownames(DD)<-2:nf
for(i in 1:(nf-1)){
for(j in (i+1):nf){
DD[j-1,i]<-minkowski(bd[i,],bd[j,],d)
}
}
return(DD)
}
distancia(aux,d=2)
dist(aux)
# la funcion de distancia
distancia<-function(bd,d=2){
nf<-dim(bd)[1]
DD<-matrix(NULL,nf-1,nf-1)
colnames(DD)<-1:(nf-1)
rownames(DD)<-2:nf
for(i in 1:(nf-1)){
for(j in (i+1):nf){
DD[j-1,i]<-minkowski(bd[i,],bd[j,],d)
}
}
return(DD)
}
distancia(aux,d=2)
dist(aux)
# la funcion de distancia
distancia<-function(bd,d=2){
nf<-dim(bd)[1]
DD<-matrix(NA,nf-1,nf-1)
colnames(DD)<-1:(nf-1)
rownames(DD)<-2:nf
for(i in 1:(nf-1)){
for(j in (i+1):nf){
DD[j-1,i]<-minkowski(bd[i,],bd[j,],d)
}
}
return(DD)
}
distancia(aux,d=2)
dist(aux)
plot(rnorm(1000),rnorm(1000))
plot(rnorm(1000),rnorm(1000))
plot(rnorm(10000),rnorm(10000))
scatterplot3d::scatterplot3d(rnorm(1000),rnorm(1000),rnorm(1000))
aux
matrix(1000,nrow = 40)
matrix(rnorm(1000),nrow = 40)
aux<-matrix(rnorm(1000),nrow = 50)
aux
sample(1:5,50)
sample(1:5,50,replace=T)
table(sample(1:5,50,replace=T))
cbind(aux,k=sample(1:5,50,replace=T))
aux<-cbind(aux,k=sample(1:5,50,replace=T))
aux
tapply(aux,aux$k,mean)
aux<-data.frame(aux)
tapply(aux,aux$k,mean)
aux[,c(1:5,"k")]
aux[,c(1:5,"k")]
str(aux)
aux[,aux$k==1]
aux[,aux$K==1]
aux$k
aux[aux$k==1,]
aux[aux$k==2,]
aux[aux$k==3,]
aux[aux$k==3,]
colMeans(aux[aux$k==3,])
colMeans(aux[aux$k==3,-"k"])
colMeans(aux[aux$k==3,-c("k")])
colMeans(aux[aux$k==3,-aux$k])
colMeans(aux[aux$k==3,])
colMeans(aux[aux$k==3,])[-"k"]
colMeans(aux[aux$k==3,])[-c("k")]
colMeans(aux[aux$k==3,])
colMeans(aux[aux$k==1,])
colMeans(aux[aux$k==2,])
aux[aux$k==2,]
apply(aux[aux$k==2,],1,mean)
apply(aux[aux$k==2,],1,median)
apply(aux[aux$k==5,],1,median)
aux[1,]
dist
distancia()
bd<-data.frame(x=rnorm(100),y=rnorm(100))
kmeans(bd,2)
?kmeans(bd,2)
