dist
distancia()
bd<-data.frame(x=rnorm(100),y=rnorm(100))
kmeans(bd,2)
?kmeans(bd,2)
bd<-data.frame(x=rnorm(100),y=rnorm(100))
head(bd)
kmeans(bd,2)
kmeans(bd,2)
kmedian
kmeans
minkowski<-function(x,y,d){
dd<-(sum(abs(x-y)**d))**(1/d)
return(dd)
}
# la funcion de distancia
distancia<-function(bd,d=2){
nf<-dim(bd)[1]
DD<-matrix(NA,nf-1,nf-1)
colnames(DD)<-1:(nf-1)
rownames(DD)<-2:nf
for(i in 1:(nf-1)){
for(j in (i+1):nf){
DD[j-1,i]<-minkowski(bd[i,],bd[j,],d)
}
}
return(DD)
}
bd<-data.frame(x=rnorm(100),y=rnorm(100))
bd
nf<-dim(bd)[1]
nf
k<-3
#paso1: asignar las k (nf>=k)
1:k
#paso1: asignar las k (nf>=k)
sample(1:k,nf,replace=T)
#paso1: asignar las k (nf>=k)
sample(1:k,nf,replace=T)
#paso1: asignar las k (nf>=k)
table(sample(1:k,nf,replace=T))
#paso1: asignar las k (nf>=k)
table(sample(1:7,nf,replace=T))
#paso1: asignar las k (nf>=k)
table(sample(1:7,nf,replace=T))
#paso1: asignar las k (nf>=k)
table(sample(1:7,nf,replace=T))
#paso1: asignar las k (nf>=k)
table(sample(1:20,nf,replace=T))
#paso1: asignar las k (nf>=k)
bd$k<-sample(1:k,nf,replace=T)
bd
centroide<-NULL
bd[bd$k==1,]
bd[bd$k==1,-"k"]
bd[bd$k==1,-c("k")]
bd[bd$k==1,]
colmeans(bd[bd$k==1,])
colMeans(bd[bd$k==1,])
for(i in 1:k){
centroide<-rbind(centroide,colMeans(bd[bd$k==1,]))
}
centroide
centroide<-NULL
for(i in 1:k){
centroide<-rbind(centroide,colMeans(bd[bd$k==i,]))
}
centroide
colMedian
apply(bd[bd$k==1,],1, median)
apply(bd[bd$k==1,],2, median)
centroide<-NULL
for(i in 1:k){
#colMeans(bd[bd$k==i,])
centroide<-rbind(centroide,apply(bd[bd$k==1,],2, median))
}
centroide
nf<-dim(bd)[1]
#paso1: asignar las k (nf>=k)
set.seed(seed)
bd$k<-sample(1:k,nf,replace=T)
nf<-dim(bd)[1]
bd$k<-sample(1:k,nf,replace=T)
centroide<-NULL
tipo<-"media"
for(i in 1:k){
#colMeans(bd[bd$k==i,])
if(tipo="media"){
centroide<-rbind(centroide,apply(bd[bd$k==1,],2, mean))
} else if(tipo="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==1,],2, median))
}
}
centroide<-NULL
for(i in 1:k){
#colMeans(bd[bd$k==i,])
if(tipo="media"){
centroide<-rbind(centroide,apply(bd[bd$k==1,],2, mean))
} else if(tipo="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==1,],2, median))
}
}
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==1,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==1,],2, median))
}
}
centroide
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
centroide
bd[1,]
d<-2
distancia(bd[1,],centroide[1,],d=d)
centroide
centroide[1,]
bd[1,]
centroide[1,]
nc<-dim(bd)[2]
centroide[1,1:nc]
bd<-data.frame(x=rnorm(100),y=rnorm(100))
nf<-dim(bd)[1]
nc<-dim(bd)[2]
bd$k<-sample(1:k,nf,replace=T)
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
bd[1,1:nc]
distancia(bd[1,1:nc],centroide[1,1:nc],d=d)
bd[1,1:nc]
centroide[1,1:nc]
t(centroide[1,1:nc])
t(bd[1,1:nc])
#paso2
minkowski(bd[1,1:nc],centroide[1,1:nc],d=d)
minkowski(bd[1,1:nc],centroide[1,1:nc],d=d)
auxd<-NULL
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[1,1:nc],centroide[j,1:nc],d=d))
}
auxd
bd[1,]
min(auxd)
which(auxd==min(auxd))
bd$k[1]
bd$k[1]
#paso2 (recalcular loo centroides al final)
for(i in 1:nf){
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[i,1:nc],centroide[j,1:nc],d=d))
}
newk<-which(auxd==min(auxd))
bd$k[i] <- newk
}
bd$k
centroide
w<-centroide
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
centroide
w
#paso2 (recalcular loo centroides al final)
cc<-0
for(i in 1:nf){
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[i,1:nc],centroide[j,1:nc],d=d))
}
newk<-which(auxd==min(auxd))
if(newk!=bd$k[i]){
bd$k[i] <- newk
cc<-cc+1
}
}
cc
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
#paso2 (recalcular loo centroides al final)
cc<-0
for(i in 1:nf){
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[i,1:nc],centroide[j,1:nc],d=d))
}
newk<-which(auxd==min(auxd))
if(newk!=bd$k[i]){
bd$k[i] <- newk
cc<-cc+1
}
}
cc
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
#paso2 (recalcular loo centroides al final)
cc<-0
for(i in 1:nf){
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[i,1:nc],centroide[j,1:nc],d=d))
}
newk<-which(auxd==min(auxd))
if(newk!=bd$k[i]){
bd$k[i] <- newk
cc<-cc+1
}
}
cc
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
#paso2 (recalcular loo centroides al final)
cc<-0
for(i in 1:nf){
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[i,1:nc],centroide[j,1:nc],d=d))
}
newk<-which(auxd==min(auxd))
if(newk!=bd$k[i]){
bd$k[i] <- newk
cc<-cc+1
}
}
cc
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
#paso2 (recalcular loo centroides al final)
cc<-0
for(i in 1:nf){
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[i,1:nc],centroide[j,1:nc],d=d))
}
newk<-which(auxd==min(auxd))
if(newk!=bd$k[i]){
bd$k[i] <- newk
cc<-cc+1
}
}
cc
apropos("while")
?while
help("while")
bd<-data.frame(x=rnorm(100),y=rnorm(100))
nf<-dim(bd)[1]
nc<-dim(bd)[2]
bd$k<-sample(1:k,nf,replace=T)
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
#paso2 (recalcular loo centroides al final)
cc<-1
while(cc!=0){ #paso3
cc<-0
for(i in 1:nf){
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[i,1:nc],centroide[j,1:nc],d=d))
}
newk<-which(auxd==min(auxd))
if(newk!=bd$k[i]){
bd$k[i] <- newk
cc<-cc+1
}
}
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
}
bd
#Nota: La entrada de la funcion es un data frame
kcenter<-function(bd,k=3,d=2,tipo="media",seed=123456){
nf<-dim(bd)[1]
nc<-dim(bd)[2]
#paso1: asignar las k (nf>=k)
set.seed(seed)
bd$k<-sample(1:k,nf,replace=T)
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
#paso2 (recalcular loo centroides al final)
cc<-1
while(cc!=0){ #paso3
cc<-0
for(i in 1:nf){
auxd<-NULL
for(j in 1:k){
auxd<-c(auxd,minkowski(bd[i,1:nc],centroide[j,1:nc],d=d))
}
newk<-which(auxd==min(auxd))
if(newk!=bd$k[i]){
bd$k[i] <- newk
cc<-cc+1
}
}
centroide<-NULL
for(i in 1:k){
if(tipo=="media"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, mean))
} else if(tipo=="mediana"){
centroide<-rbind(centroide,apply(bd[bd$k==i,],2, median))
}
}
}
return(bd)
}
bd
bd<-data.frame(x=rnorm(100),y=rnorm(100))
kcenter(bd)
kcenter(bd,k=4)
kcenter(bd,k=4,d=1)
kcenter(bd,k=4,d=1,tipo="mediana")
bd<-data.frame(x=rnorm(100),y=rnorm(100),z=rnorm(100))
kcenter(bd,k=4,d=1,tipo="mediana")
bd<-data.frame(x=rnorm(100),y=rnorm(100),z=rnorm(100))
bd
library(cluster)
kk<-kmeans(bd,3)
s <- silhouette(kk$cluster, dist(bd))
plot(s)
s
data("iris")
data("iris")
iris
kmeans(iris[,-5],k=3)
kmeans(iris[,-5],3)
aux<-kmeans(iris[,-5],3)
#sobre la base IRIS
data("iris")
aux<-kmeans(iris[,-5],3)
#sobre la base IRIS
data("iris")
aux<-kmeans(iris[,-5],3)
s <- silhouette(aux$cluster, dist(iris[,-5]))
plot(s)
s
s
s
aux<-kmeans(iris[,-5],5)
s <- silhouette(aux$cluster, dist(iris[,-5]))
plot(s)
plot(s)
aux<-kmeans(iris[,-5],4)
s <- silhouette(aux$cluster, dist(iris[,-5]))
plot(s)
aux<-kmeans(iris[,-5],2)
s <- silhouette(aux$cluster, dist(iris[,-5]))
plot(s)
aux<-kmeans(iris[,-5],7)
s <- silhouette(aux$cluster, dist(iris[,-5]))
plot(s)
aux<-kmeans(iris[,-5],3)
aux
iris
pam
?pam
pam(bd,k=3)
kmeans(bd,k=3)
pam(bd,k=3)
kmeans(bd,3)
library(fpc)# Flexible Procedures for Clustering
library(fpc)# Flexible Procedures for Clustering
sol <- pamk(iris[,-5], krange=2:10, criterion="asw", usepam=TRUE)
sol
?pamk(bd,krange=2:5)
pamk(bd,krange=2:5,usepam = T)
pamk(bd,krange=2:5,usepam = T)
pamk(bd,krange=2:10,usepam = T)
gsub(",","","123,455")
gsub(",","","123,455")
grep()
?grep()
aux<-rbind(c(0,0,0,0,1,1,1),c(1,0,1,0,0,1,1))
aux
A<-sum(aux[i,])
A<-sum(aux[1,])
A
B<-sum(aux[2,])
B
apply(aux, 2, sum)
J<-
```
apply(aux, 2, sum)
apply(aux, 2, sum)==2
sum(apply(aux, 2, sum)==2)
J<-sum(apply(aux, 2, sum)==2)
aux
#euclideana
sqrt(A+B-2*J)
#manhathan
A+B-2*J
#binomial
log(2)*(A+B-2*J)
#bray
(A+B-2*J)/(A+B)
library(vegan)
library(help=vegan)
?vegdist()
vegdist(aux)
#bray
(A+B-2*J)/(A+B)
aux1<-matrix(rbinom(200,1,0.4),nrow = 40)
aux1
#una base de datos mas grandes
set.seed(999)
aux1<-matrix(rbinom(200,1,0.4),nrow = 40)
aux
aux1
vegdist(aux1)
vegdist(aux1)
vegdist(aux1,method = "binomial")
#una base de datos mas grandes
set.seed(999)
aux1<-matrix(rbinom(200,1,0.4),nrow = 20)
vegdist(aux1,method = "binomial")
#una base de datos mas grandes
set.seed(999)
aux1<-matrix(rbinom(200,1,0.4),nrow = 20)
vegdist(aux1,method = "binomial")
vegdist(aux1,method = "binomial",diag = T)
dist(aux1)
vegdist(aux1,method = "binomial")
pam
library(cluster)
?pam()
library(cluster)
?daisy()
data("agriculture")
str(agriculture)
data("flower")
str(flower)
daisy(flower,metric = "gower")
daisy(flower,metric = "gower")
dd<-daisy(flower,metric = "gower")
summary(dd)
vegdist(aux1,method = "binomial",binary = T)
vegdist(aux,binary = T)
vegdist(aux,binary = F)
?vegdist()
aux<-matrix(rnorm(100),nrow=5)
dist(aux) #euclideana
dist(aux, method="manhattan")
dist(aux, method="minkowski", p=3)
(170/7)
(170/7)/2
130*14
bookdown::render_book("index.Rmd", "bookdown::gitbook") scsdcsd
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
?bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::clean_book(TRUE)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
