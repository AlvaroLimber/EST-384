tapply(aux1[,1:5],aux1[,6],Colmeans)
tapply(aux1[,1:5],aux1[,6],colMeans)
aux1[,1:5]
aux1[aux1[,6]==1,1:5]
aux1
aux1[aux1[,6]==1,1:5]
colMeans(aux1[aux1[,6]==1,1:5])
colMeans(aux1[aux1[,6]==2,1:5])
colMeans(aux1[aux1[,6]==3,1:5])
colMeans(aux1[aux1[,6]==4,1:5])
colMeans(aux2[aux2[,6]==1,1:5])
colMeans(aux2[aux2[,6]==2,1:5])
colMeans(aux2[aux2[,6]==3,1:5])
colMeans(aux2[aux2[,6]==4,1:5])
colMeans(aux3[aux3[,6]==1,1:5])
colMeans(aux3[aux3[,6]==2,1:5])
colMeans(aux3[aux3[,6]==3,1:5])
colMeans(aux3[aux3[,6]==4,1:5])
aux1
colMeans(aux1[aux1[,6]==1,1:5])
colMeans(aux1[aux1[,6]==2,1:5])
colMeans(aux1[aux1[,6]==3,1:5])
colMeans(aux1[aux1[,6]==4,1:5])
rbind(colMeans(aux1[aux1[,6]==1,1:5]),
colMeans(aux1[aux1[,6]==2,1:5]),
colMeans(aux1[aux1[,6]==3,1:5]),
colMeans(aux1[aux1[,6]==4,1:5]))
vmean<-rbind(colMeans(aux1[aux1[,6]==1,1:5]),
colMeans(aux1[aux1[,6]==2,1:5]),
colMeans(aux1[aux1[,6]==3,1:5]),
colMeans(aux1[aux1[,6]==4,1:5]))
vmean
aux
rbind(aux[1,],vmean)
dist(rbind(aux[1,],vmean))
load(url('https://raw.githubusercontent.com/AlvaroLimber/EST-383/master/data/oct20.RData'))
View(computo)
library(dplyr)
# preparación de la base de datos
computo$Elección
# preparación de la base de datos
unique(computo$Elección)
bd<-computo %>% filter(País=="Bolovia" & Elección=="Presidente y Vicepresidente")
bd<-computo %>% filter(País=="Bolivia" & Elección=="Presidente y Vicepresidente")
View(bd)
names(bd)
bd %>% group_by(Departamento, Provincia, Municipio) %>% summarise(sum(Inscritos),sum(CC))  # unidad de análisis municipio
names(bd)
bd %>% group_by(Departamento, Provincia, Municipio) %>% summarise_at(vars(13:25),sum)  # unidad de análisis municipio
?summarise_at()
bd %>% group_by(Departamento, Provincia, Municipio) %>% summarise_at(vars(Inscritos:Nulos),sum)  # unidad de análisis municipio
bdmun<-bd %>% group_by(Departamento, Provincia, Municipio) %>% summarise_at(vars(Inscritos:Nulos),sum)  # unidad de análisis municipio
names(bd)
head(bd)
View(bd)
bdrec<-bd %>% group_by(Departamento, Provincia, Municipio,Localidad,Recinto) %>% summarise_at(vars(Inscritos:Nulos),sum)
bdrec
View(bdmun)
names(bdmun)
# Modelado: K-center
kmeans(bdmun[4:16],3)
# Modelado: K-center
mod1<-kmeans(bdmun[4:16],3)
mod1$cluster
cbind(bdmun,mod1$cluster)
cbind(bdmun,mod1$cluster)
cbind(bdmun,mod1$cluster)
bdmun<-cbind(bdmun,mod1$cluster)
View(bdmun)
bdmun<-cbind(bdmun,cl1=mod1$cluster)
View(bdmun)
table(bdmun$cl1)
table(bdmun$cl1)
bdmun %>% filter(cl1==1)
bdmun %>% filter(cl1==2)
# Modelado: K-center
mod1<-kmeans(bdmun[4:16],4)
bdmun<-cbind(bdmun,cl1=mod1$cluster)
View(bdmun)
bdmun<-bd %>% group_by(Departamento, Provincia, Municipio) %>% summarise_at(vars(Inscritos:Nulos),sum)  # unidad de análisis municipio
# Modelado: K-center
mod1<-kmeans(bdmun[4:16],4)
bdmun<-cbind(bdmun,cl1=mod1$cluster)
table(bdmun$cl1)
bdmun %>% filter(cl1==1)
bdmun %>% filter(cl1==2)
bdmun %>% filter(cl1==3)
bdmun %>% filter(cl1==4)
mod1$centers
#municipios
bdmun<-bd %>% group_by(Departamento, Provincia, Municipio) %>% summarise_at(vars(Inscritos:Nulos),sum)
View(bdmun)
names(bdmun)
bdmun[,5:13]
prop.table(bdmun[,5:13],1)
prop.table(as.matrix(bdmun[,5:13]),1)
bdmun[,5:13]
apply(bdmun[,5:13],1,sum)
bdmun[,5:13]/apply(bdmun[,5:13],1,sum)
head(prop.table(as.matrix(bdmun[,5:13]),1))
head(bdmun[,5:13]/apply(bdmun[,5:13],1,sum))
bdmun[,5:13]<-bdmun[,5:13]/apply(bdmun[,5:13],1,sum)
View(bdmun)
# Modelado: K-center
mod1<-kmeans(bdmun[3:13],3)
mmod1
mod1
# Modelado: K-center
mod1<-kmeans(bdmun[5:13],3)
bdmun<-cbind(bdmun,cl1=mod1$cluster)
table(bdmun$cl1)
mod1$centers
# Modelado: K-center
mod1<-kmeans(bdmun[5:13],4)
bdmun<-cbind(bdmun,cl1=mod1$cluster)
#prop.table(as.matrix(bdmun[,5:13]),1)
bdmun[,5:13]<-bdmun[,5:13]/apply(bdmun[,5:13],1,sum)
#municipios
bdmun<-bd %>% group_by(Departamento, Provincia, Municipio) %>% summarise_at(vars(Inscritos:Nulos),sum)
#prop.table(as.matrix(bdmun[,5:13]),1)
bdmun[,5:13]<-bdmun[,5:13]/apply(bdmun[,5:13],1,sum)
# Modelado: K-center
mod1<-kmeans(bdmun[5:13],4)
bdmun<-cbind(bdmun,cl1=mod1$cluster)
table(bdmun$cl1)
mod1$centers
# Modelado: K-center
mod1<-kmeans(bdmun[5:13],5)
mod2<-kmeans(bdmun[5:13],5)
bdmun<-cbind(bdmun,cl2=mod2$cluster)
mod2$centers
table(bdmun$cl5)
table(bdmun$cl2)
table(bdmun$Departamento,bdmun$cl2)
library(ggplot2)
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC))+geom_point()
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC,colour=cl2))+geom_point()
?ggplot
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC,colour=cl2))+geom_point()
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC,colour=cl2,size=Inscritos))+geom_point()
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC,shape=cl2,size=Inscritos))+geom_point()
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC,colour=cl2,size=Inscritos))+geom_point()
mod2$centers
summary(mod2$centers)
summary(t(mod2$centers))
Hmisc::describe(t(mod2$centers))
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC,colour=cl2,size=Inscritos))+geom_point(aes(shape=cl2))
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC,size=Inscritos))+geom_point(aes(shape=cl2))
mod2$cluster
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC,size=Inscritos))+geom_point(aes(shape=as.factor(cl2)))
ggplot(bdmun,aes(x=`MAS - IPSP`,y=CC, colour=as.factor(cl2),size=Inscritos))+geom_point()
mod2$centers
ggplot(bdmun,aes(x=`MAS - IPSP`,y=PDC, colour=as.factor(cl2),size=Inscritos))+geom_point()
names(bdmun)
ggplot(bdmun,aes(x=`MAS - IPSP`,y=21F, colour=as.factor(cl2),size=Inscritos))+geom_point()
ggplot(bdmun,aes(x=`MAS - IPSP`,y=`21F`, colour=as.factor(cl2),size=Inscritos))+geom_point()
bd<-data.frame(matrix(1000,100,10))
set.seed(12345)
bd<-data.frame(matrix(1000,100,10))
bd
set.seed(12345)
bd<-data.frame(matrix(rnorm(1000),100,10))
bd
?dist()
k=2;distancia="euclidean";center="media"
k=3;distancia="euclidean";center="media"
#0. Definición del valor de $k$.
k=3;distancia="euclidean";center="media"
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
bd
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
nrow(bd)
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
nf<-nrow(bd)
seq(1:3)
rep(seq(1:3),nf)
rep(seq(1:3),nf/k)
nf/k
ceiling(nf/k)
rep(seq(1:3), ceiling(nf/k) )
rep(seq(1:3),ceiling(nf/k))[1:nrow]
rep(seq(1:3),ceiling(nf/k))[1:nf]
bd$k<-rep(seq(1:3),ceiling(nf/k))[1:nf]
head(bd)
sample(1:k,nf)
1:k
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
bd$k<-sample(1:k,nf,replace = T)
sample(1:k,nf,replace = T)
sample(1:60,nf,replace = T)
table(sample(1:60,nf,replace = T))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
table(sample(1:60,nf,replace = T))
table(sample(1:60,nf,replace = T))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
length(table(sample(1:60,nf,replace = T)))
bd$k<-sample(1:k,nf,replace = T)
bd$k
table(bd$k)
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
k<-60
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
table(bd$k)
lenght(table(bd$k))
length(table(bd$k))
length(table(bd$k))
length(table(bd$k))
length(table(bd$k))
length(table(bd$k))
length(table(bd$k))
length(table(bd$k))
lenght(table(bd$k))
lenght(table(bd$k))
lenght(table(bd$k))
lenght(table(bd$k))
length(table(bd$k))
k<-6
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
bd$k
bd
#bd$k<-rep(seq(1:3),ceiling(nf/k))[1:nf]
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
bd$k
#0. Definición del valor de $k$.
k=3;distancia="euclidean";center="media";semilla=12345
#0. Definición del valor de $k$.
k=6;distancia="euclidean";center="media";semilla=12345
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
nf<-nrow(bd)
#bd$k<-rep(seq(1:3),ceiling(nf/k))[1:nf]
set.seed(semilla)
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
bd$k
bd[,-"k"]
bd[,-c("k")]
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
bd[,-c("k")]
bd[,-"k"]
bd
bd[,"k"]
bd[,-"k"]
set.seed(12345)
bd<-data.frame(matrix(rnorm(1000),100,10))
#0. Definición del valor de $k$.
k=6;distancia="euclidean";center="media";semilla=12345
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
nf<-nrow(bd)
nc<-ncol(bd)
nf
nc
#bd$k<-rep(seq(1:3),ceiling(nf/k))[1:nf]
set.seed(semilla)
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
bd[,-(nc+1)]
tapply(bd[,-(nc+1)],bd$k,mean)
tapply(bd[,-(nc+1)],bd$k,Colmeans)
colMeans()
tapply(bd[,-(nc+1)],bd$k,colMeans)
head(bd)
bd[,-(nc+1)]
bd[bd$k==1,-(nc+1)]
colMeans(bd[bd$k==1,-(nc+1)])
apply(bd[bd$k==1,-(nc+1)],2,mean)
apply(bd[bd$k==1,-(nc+1)],2,median)
library(dplyr)
library(dplyr)
bd %>% group_by(k) %>% summarise_at(vars(1:nc),mean)
apply(bd[bd$k==1,-(nc+1)],2,mean)
bd %>% group_by(k) %>% summarise_at(vars(1:nc),median)
centros
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),mean)
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),median)
centros
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
bd[1,]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
bd[1,1:nc]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
cbind(bd[1,1:nc],centros[,-1])
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
rbind(bd[1,1:nc],centros[,-1])
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[1,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[2,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[3,1:nc],centros[,-1]))
bd[3,]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[3,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[4,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[6,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[7,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[7,1:nc],centros[,-1]))
bd[,7]
bd[7,]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[7,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[17,1:nc],centros[,-1]))
bd[17,]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[17,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[17,1:nc],centros[,-1]))[,1]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[17,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[17,1:nc],centros[,-1]))
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
}
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[17,1:nc],centros[,-1]))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[17,1:nc],centros[,-1]))[,1]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
as.matrix(dist(rbind(bd[17,1:nc],centros[,-1])))
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
as.matrix(dist(rbind(bd[17,1:nc],centros[,-1])))[,1]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
as.matrix(dist(rbind(bd[17,1:nc],centros[,-1])))[-1,1]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
aux<-as.matrix(dist(rbind(bd[17,1:nc],centros[,-1])))[-1,1]
aux
?which()
aux
which(aux==min(aux))
which(aux==min(aux))
which(aux==min(aux))
rk<-which(aux==min(aux))
rk
rk<-as.numeric(which(aux==min(aux)))
rk
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
aux<-as.matrix(dist(rbind(bd[1,1:nc],centros[,-1])))[-1,1]
rk<-as.numeric(which(aux==min(aux)))
rk
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
aux<-as.matrix(dist(rbind(bd[30,1:nc],centros[,-1])))[-1,1]
rk<-as.numeric(which(aux==min(aux)))
rk
bd[30,]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
aux<-as.matrix(dist(rbind(bd[30,1:nc],centros[,-1])))[-1,1]
rk<-as.numeric(which(aux==min(aux)))
rk
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
aux<-as.matrix(dist(rbind(bd[30,1:nc],centros[,-1]),method =distancia ))[-1,1]
rk<-as.numeric(which(aux==min(aux)))
rk
rk
bd$k[30]
rk==bd$k[30]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
i<-30
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
i<-30
aux<-as.matrix(dist(rbind(bd[i,1:nc],centros[,-1]),method =distancia ))[-1,1]
rk<-as.numeric(which(aux==min(aux)))
bd[i,]
rk
bd$k[i]
bd$k[i]<-rk
bd[i,]
#0. Definición del valor de $k$.
k=6;distancia="euclidean";center="media";semilla=12345
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
nf<-nrow(bd)
set.seed(12345)
bd<-data.frame(matrix(rnorm(1000),100,10))
bd
#0. Definición del valor de $k$.
k=6;distancia="euclidean";center="media";semilla=12345
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
nf<-nrow(bd)
nc<-ncol(bd)
#bd$k<-rep(seq(1:3),ceiling(nf/k))[1:nf]
set.seed(semilla)
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
if(centro=="media"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),mean)
} else if(centro=="mediana"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),median)
}
#0. Definición del valor de $k$.
k=6;distancia="euclidean";centro="media";semilla=12345
bd<-data.frame(matrix(rnorm(1000),100,10))
set.seed(12345)
bd<-data.frame(matrix(rnorm(1000),100,10))
#0. Definición del valor de $k$.
k=6;distancia="euclidean";centro="media";semilla=12345
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
nf<-nrow(bd)
nc<-ncol(bd)
#bd$k<-rep(seq(1:3),ceiling(nf/k))[1:nf]
set.seed(semilla)
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
if(centro=="media"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),mean)
} else if(centro=="mediana"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),median)
}
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
reasig<-1
while(reasig>0){
reasig<-0
for(i in 1:nf){
#i<-30
aux<-as.matrix(dist(rbind(bd[i,1:nc],centros[,-1]),method =distancia     ))[-1,1]
rk<-as.numeric(which(aux==min(aux)))
#re asignación
if(rk!=bd$k[i]){
bd$k[i]<-rk
reasig<-reasig+1
if(centro=="media"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),mean)
} else if(centro=="mediana"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),median)
}
}
}
}
bd
centros
bd$k
centros
kcenter<-function(bd,k=2,distancia="euclidean",centro="media",semilla=12345){
#0. Definición del valor de $k$.
#k=6;distancia="euclidean";centro="media";semilla=12345
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
nf<-nrow(bd)
nc<-ncol(bd)
#bd$k<-rep(seq(1:3),ceiling(nf/k))[1:nf]
set.seed(semilla)
bd$k<-c(1:k,sample(1:k,nf-k,replace = T))
if(centro=="media"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),mean)
} else if(centro=="mediana"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),median)
}
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
reasig<-1
while(reasig>0){
reasig<-0
for(i in 1:nf){
#i<-30
aux<-as.matrix(dist(rbind(bd[i,1:nc],centros[,-1]),method =distancia     ))[-1,1]
rk<-as.numeric(which(aux==min(aux)))
#re asignación
if(rk!=bd$k[i]){
bd$k[i]<-rk
reasig<-reasig+1
if(centro=="media"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),mean)
} else if(centro=="mediana"){
centros<-bd %>% group_by(k) %>% summarise_at(vars(1:nc),median)
}
}
}
}
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
return(list(k=bd$k,centros=centros))
}
