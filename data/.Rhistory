text(x,y,ll,cex = 0.7,pos=3,col = "blue")
text(xx,"HOLA",cex=2)
load(url("https://github.com/AlvaroLimber/EST-384/raw/master/data/covid-19.Rdata"))
View(bdc)
names(bdc)
load(url("https://github.com/AlvaroLimber/EST-384/raw/master/data/eh18.Rdata"))
attr(eh18p)
attributes(eh18p)
at<-attributes(eh18p)
at$variable.labels
at$variable.labels[20]
at$variable.labels[1:20]
mean(bd18p$s02a_03)
mean(eh18p$s02a_03)
# media
mean(eh18p$s02a_03)
# mediana
median(eh18p$s02a_03)
library(DMwR2)
centralValue(eh18p$s02a_02)
centralValue(eh18p$s02a_03)
mean(eh18p$s02a_03)
eh18p %>% select(s02a_03) %>% mean()
# exploracion por grupos
library(dplyr) # %>%
eh18p %>% select(s02a_03) %>% mean()
mean(eh18p$s02a_03)
eh18p %>% select(s02a_03) %>% mean()
eh18p %>% select(s02a_03)
eh18p %>% select(s02a_03) %>% mean()
eh18p %>% select(s02a_03) %>% mean(na.rm=T)
eh18p %>% select(s02a_03) %>% median()
eh18p %>% select(s02a_02)
eh18p %>% select(s02a_02) %>% table()
table(eh18p$s02a_02)
eh18p %>% group_by(depto,area) %>% summarise(mean(s02a_03))
eh18p %>% group_by(depto,area) %>%
summarise(mean(s02a_03),median(s02a_03))
?summarise()
eh18p %>% group_by(depto,area) %>%
summarise(mean(s02a_03),median(s02a_03),n())
eh18p %>% group_by(depto,area) %>%
summarise(mean(s02a_03),median(s02a_03),n(),min(ylab),max(ylab))
eh18p %>% group_by(depto,area) %>%
summarise(mean(s02a_03),median(s02a_03),n(),min(ylab,na.rm = T),max(ylab))
eh18p %>% group_by(depto,area) %>%
summarise(mean(s02a_03),median(s02a_03),n(),min(ylab,na.rm = T),max(ylab))
eh18p %>% group_by(depto,area) %>%
summarise(mean(s02a_03),median(s02a_03),n(),
min(ylab,na.rm = T),max(ylab,na.rm = T))
eh18p %>% group_by(depto,area) %>%
summarise(mean(s02a_03),median(s02a_03),n(),
min(ylab,na.rm = T),max(ylab,na.rm = T))
eh18p %>% group_by(depto,area) %>%
summarise(media=mean(s02a_03),mediana=median(s02a_03),N=n(),
min_ylab=min(ylab,na.rm = T),max_ylab=max(ylab,na.rm = T))
t1<-eh18p %>% group_by(depto,area) %>%
summarise(media=mean(s02a_03),mediana=median(s02a_03),N=n(),
min_ylab=min(ylab,na.rm = T),max_ylab=max(ylab,na.rm = T))
eh18p %>% group_by(depto,area) %>%
summarise(sd(s02a_03))
eh18p %>% group_by(depto,area) %>%
summarise(sd(s02a_03),IQR(s02a_03))
eh18p %>% group_by(depto,area) %>%
summarise(sd(s02a_03),IQR(s02a_03),range(s02a_03))
range(s02a_03)
range(eh18p$s02a_03)
quantile(eh18p$s02a_03)
names(eh18p)
describe(eh18p[,3:7])
# exploración a fondo
library(Hmisc)
describe(eh18p[,3:7])
describe(eh18p[,ylab])
describe(eh18p[,"ylab"])
barplot(table(eh18p$s03a_01a))
barplot(table(eh18p$s03a_01a))
library(ggplot2)
ggplot(eh18p,aes(x=s03a_01a))+geom_bar()
ggplot(eh18p,aes(x=s03a_01a))+geom_bar()+ggtitle("Dónde vivia hace 5 años")
library(GGally)
ggpairs(eh18p,columns = c("ylab","tothrs","aestudio"))
ggpairs(eh18p,columns = c("ylab","tothrs","aestudio","area"))
ggpairs(eh18p,columns = c("ylab","tothrs","s02a_03","area"))
ggpairs(eh18p,columns = c("ylab","tothrs","s03a_01a","area"))
load(url("https://github.com/AlvaroLimber/EST-384/raw/master/data/eh18.Rdata"))
rm(list=ls())
load(url("https://github.com/AlvaroLimber/EST-384/raw/master/data/eh18.Rdata"))
library(ggplot2)
table(eh18p$s03_a01a)
table(eh18p$s03a_a01a)
table(eh18p$s03a_01a)
#### cualtitativa
#donde vivia hace 5 años
table(eh18p$s03a_01a)
#### cualtitativa
#donde vivia hace 5 años
prop.table(table(eh18p$s03a_01a))
#### cualtitativa
#donde vivia hace 5 años
prop.table(table(eh18p$s03a_01a))*100
#### cualtitativa
#donde vivia hace 5 años
t1<-prop.table(table(eh18p$s03a_01a))*100
barplot(t1,main="Donde vivia hace 5 años")
ggplot(eh18p,aes(x=s03a_01a))+geom_bar()
ggplot(eh18p,aes(x=s03a_01a))+geom_bar()+ggtitle("Donde vivia hace 5 años")
ggplot(eh18p,aes(x=s03a_01a))+
geom_bar()+ggtitle("Donde vivia hace 5 años")+
facet_wrap(~area)
ggplot(eh18p,aes(x=s03a_01a))+
geom_bar()+ggtitle("Donde vivia hace 5 años")+
facet_wrap(~depto)
hist(eh18p$ylab)
boxplot(eh18p$ylab)
boxplot(log(eh18p$ylab))
boxplot(eh18p$ylab~eh18p$area)
boxplot(log(eh18p$ylab)~log(eh18p$area))
boxplot(log(eh18p$ylab)~eh18p$area)
boxplot(log(eh18p$ylab)~eh18p$s02a_02)
ggplot(eh18p,aes(x=ylab))+geom_boxplot()
ggplot(eh18p,aes(x=ylab))+geom_boxplot()+
facet_wrap(~depto)
ggplot(eh18p,aes(x=ylab))+geom_hist()+
facet_wrap(~depto)
ggplot(eh18p,aes(x=ylab))+geom_histogram()+
facet_wrap(~depto)
eh18p$s02a_03
ggplot(eh18p,aes(x=s02a_03))+geom_histogram()+
facet_wrap(~depto)
ggplot(eh18p,aes(x=s02a_03))+geom_histogram()+
facet_wrap(~area)
ggplot(eh18p,aes(x=area,y=ylab))+geom_boxplot()
ggplot(eh18p,aes(x=depto,y=ylab))+geom_boxplot()
ggplot(eh18p,aes(x=depto,y=ylab))+
geom_boxplot()+facet_wrap(~area)
plot(eh18p$tothrs,eh18p$ylab)
plot(eh18p$tothrs,eh18p$ylab)
cor(eh18p$tothrs,eh18p$ylab)
cor(eh18p$tothrs,eh18p$ylab,na.rm=T)
cor(eh18p$tothrs,eh18p$ylab,na.omit()=T)
cor(eh18p$tothrs,eh18p$ylab,na.omit=T)
?cor(eh18p$tothrs,eh18p$ylab)
cor(eh18p$tothrs,eh18p$ylab,use =  "complete.obs")
plot(eh18p$tothrs,eh18p$ylab)
cor(eh18p$tothrs,eh18p$ylab,use =  "complete.obs")
plot(eh18p[,c("ylab","tothrs","aestudio")])
pairs(eh18p[,c("ylab","tothrs","aestudio")])
pairs(eh18p[,c("ylab","tothrs","aestudio")])
library(GGally)
ggpairs(eh18p,columns = c("ylab","tothrs","aestudio"))
ggpairs(eh18p,columns = c("ylab","tothrs","aestudio","area","s02a_02"))
ggpairs(eh18p,columns = c("tothrs","aestudio","area","s02a_02"))
# multivariantes
i<-sample(1:dim(eh18p)[1],100)
i
# multivariantes
s<-sample(1:dim(eh18p)[1],100)
match(c("s02a_03","aestudio","ylab","tothrs"),names(eh18p))
i<-match(c("s02a_03","aestudio","ylab","tothrs"),names(eh18p))
ggparcoord(eh18p[s,],columns = i)
ggparcoord(eh18p[s,],columns = i,boxplot = T)
ggparcoord(eh18p[s,],columns = i,groupColumn = "area")
ggparcoord(eh18p[s,],columns = i)
ggparcoord(eh18p[s,],columns = i[1])
ggparcoord(eh18p[s,],columns = i[1:2])
ggparcoord(eh18p[s,],columns = i)
# multivariantes
s<-sample(1:dim(eh18p)[1],200)
ggparcoord(eh18p[s,],columns = i)
ggparcoord(eh18p[s,],columns = i)
ggparcoord(eh18p[s,],columns = i,groupColumn = "area")
library(TeachingDemos)
# multivariantes
s<-sample(1:dim(eh18p)[1],50)
faces(na.omit(eh18p[s,i]))
# multivariantes
s<-sample(1:dim(eh18p)[1],100)
faces(na.omit(eh18p[s,i]))
# multivariantes
s<-sample(1:dim(eh18p)[1],200)
faces(na.omit(eh18p[s,i]))
eh18p[5092,i]
eh18p[5092,i]
rm(list=ls())
library(dplyr)
load(url("https://github.com/AlvaroLimber/EST-384/raw/master/data/endsa.RData"))
ll<-attributes(endsa)
ll$var.labels
t1<-endsa %>% filter(year==2008) %>% select(7,14) %>% table()
t1<-t1[1:4,]
t1
#Ho: independencia  Ha: ~independencia
#p-valor=pr(Ho)
#paso 1
N<-t1
P<-N/n
addmargins(P,c(1,2))
t1
#Ho: independencia  Ha: ~independencia
#p-valor=pr(Ho)
#paso 1
N<-t1
n<-sum(ff)
#paso 0, verificar si existe relación a nivel de variables
#test chi-cuadrado
chisq.test(t1)
addmargins(t1,c(1,2))
ff<-margin.table(t1,1)
cc<-margin.table(t1,2)
n<-sum(ff)
ee<-(ff%*%t(cc))/n
ee
#Ho: independencia  Ha: ~independencia
#p-valor=pr(Ho)
#paso 1
N<-t1
P<-N/n
addmargins(P,c(1,2))
rr<-margin.table(P,1)
cc<-margin.table(P,2)
Dr<-diag(rr)
Dc<-diag(cc)
S<-diag(rr^(-0.5)) %*% (P-rr %*%t (cc))%*%diag(cc^(-0.5))
S
#paso2
u<-svd(S)$u
v<-svd(S)$v
Da<-diag(svd(S)$d)
u # filas
v # columnas
Da # inercia = varianza
#paso 3
$F=D_r^{-1/2} U D_{\alpha}$
FF<-diag(rr^(-0.5))%*% u %*%Da
FF
#paso 3
#Coordenadas principales de filas: $F=D_r^{-1/2} U D_{\alpha}$
FF<-diag(rr^(-0.5))%*% u %*%Da
#paso 4
#Coordenadas principales de filas: $G=D_c^{-1/2} V D_{\alpha}$
GG<-diag(cc^(-0.5))%*% v %*%Da
GG
Da
t1
GG
Da
t1
Da
########################################
svd(S)$d
########################################
cumsum(svd(S)$d)
########################################
cumsum(svd(S)$d)/sum(svd(S)$d)
FF
GG
plot(FF[,1],FF[,2],type="p")
t1
points(GG[,1],GG[,2],type="p",col="red")
plot(FF[,1],FF[,2],type="n")
t1
row.names(t1)
text(FF[,1],FF[,2],labels = row.names(t1))
plot(FF[,1],FF[,2],type="n")
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.5)
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.7)
plot(FF[,1],FF[,2],type="n")
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.7)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.7)
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.7)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.7)
text(GG[,1],GG[,2],labels = row.names(t1),col="red")
text(GG[,1],GG[,2],labels = row.names(t1),col="red",cex=0.7)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.7)
text(GG[,1],GG[,2],labels = row.names(t1),col="red",cex=0.7)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.7)
text(GG[,1],GG[,2],labels = col.names(t1),col="red",cex=0.7)
colnames(t|)
colnames(t1)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.7)
text(GG[,1],GG[,2],labels = colnames(t1),col="red",cex=0.7)
library(ca)
ca(t1)
plot(ca(t1))
t1
#grafico 2
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
#grafico 2
margin.table(t1)
#grafico 2
margin.table(t1,1)
#grafico 2
margin.table(prop.table(t1),1)
wc<-margin.table(prop.table(t1),2)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
#grafico 2
wr<-margin.table(prop.table(t1),1)
wc<-margin.table(prop.table(t1),2)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.5+wr)
text(GG[,1],GG[,2],labels = colnames(t1),col="red",cex=0.5+wc)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.3+wr)
text(GG[,1],GG[,2],labels = colnames(t1),col="red",cex=0.3+wc)
plot(FF[,1],FF[,2],type="n",xlim=c(-1,1))
text(FF[,1],FF[,2],labels = row.names(t1),cex=0.4+wr)
text(GG[,1],GG[,2],labels = colnames(t1),col="red",cex=0.4+wc)
wc
t1
t1
t1
t1
n
GG
install.packages("mca")
mca
rm(list = ls())
#install.packages("explor")
#install.packages("FactoMineR")
library(FactoMineR)
library(explor)
data("decathlon")
pca<-PCA(decathlon[,1:12])
mca<-MCA(hobbies[1:1000,c(1:8)])
data(hobbies)
mca<-MCA(hobbies[1:1000,c(1:8)])
explor(mca)
rm(list=ls())
#Planificación
StartDate <- as.Date("2020-05-11")
EndDate <- as.Date("2020-08-15")
myDays <- seq(StartDate , EndDate, by = "day")
excludeDays <- c("lunes","miercoles","viernes", "sábado","domingo")
#excludeDays <- c("martes","jueves","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays
#Planificación
StartDate <- as.Date("2020-05-13")
EndDate <- as.Date("2020-08-15")
myDays <- seq(StartDate , EndDate, by = "day")
excludeDays <- c("lunes","miercoles","viernes", "sábado","domingo")
#excludeDays <- c("martes","jueves","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays
data.frame(fecha=myWeekDays,sesion=clases[-c(1:k)])
View(myWeekDays)
#Planificación
StartDate <- as.Date("2020-05-13")
EndDate <- as.Date("2020-08-15")
myDays <- seq(StartDate , EndDate, by = "day")
mydays
myDays
#Planificación
StartDate <- as.Date("2020-05-13")
EndDate <- as.Date("2020-08-15")
myDays <- seq(StartDate , EndDate, by = "day")
myDays
#Planificación
StartDate <- as.Date("2020-05-13")
EndDate <- as.Date("2020-08-15")
myDays <- seq(StartDate , EndDate, by = "day")
excludeDays <- c("lunes","míercoles","viernes", "sábado","domingo")
#excludeDays <- c("martes","jueves","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays
#Planificación
StartDate <- as.Date("2020-05-14")
EndDate <- as.Date("2020-08-15")
myDays <- seq(StartDate , EndDate, by = "day")
excludeDays <- c("lunes","míercoles","viernes", "sábado","domingo")
#excludeDays <- c("martes","jueves","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays
days
day()
weekdays()
weekdays(myDays)
excludeDays <- c("lunes","miércoles","viernes", "sábado","domingo")
#excludeDays <- c("martes","jueves","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays
View(myWeekDays)
library("hemken/Statamarkdown")
install_github("hemken/Statamarkdown")
library(devtools)
install_github("hemken/Statamarkdown")
library(devtools)
install.packages("devtools")
library(devtools)
install_github("hemken/Statamarkdown")
install_github("hemken/Statamarkdown")
library("Statamarkdown")
install_github("hemken/Statamarkdown")
library("Statamarkdown")
knitr::opts_chunk$set(echo = TRUE)
library(help="Statamarkdown")
find_stata()
?find_stata()
find_stata("")
find_stata("C:\Program Files (x86)\Stata15")
find_stata("C:\\Program Files (x86)\\Stata15")
stata_engine
stata_engine()
?stata_engine()
shiny::runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
actionButton("b1",label="Boton de accion"),
checkboxInput("b2","Boton de check simple"),
?checkboxGroupInput("b3","Boton de check múltiple"),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
# Define UI for application that draws a histogram
shinyUI(fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
sliderInput("bins",
"Number of bins:",
min = 1,
max = 50,
value = 30),
actionButton("b1",label="Boton de accion"),
checkboxInput("b2","Boton de check simple"),
?checkboxGroupInput("b3","Boton de check múltiple"),
),
# Show a plot of the generated distribution
mainPanel(
plotOutput("distPlot")
)
)
))
?checkboxGroupInput
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
hist(x,ann=F)
hist(x,ann=F)
x<-rnorm(10)
hist(x,ann=F)
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
?hist(x,ann=F,)
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
runApp('GitHub/EST-383/code/shiny/clase18may/EST383')
library(explor)
library(FactoMineR)
setwd("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-384\\data")
load("eh18.Rdata")
names(eh18v)
attributes(eh18v)
attributes(eh18v)$var.labels
attributes(eh18v)$var
attributes(eh18v)
str(attributes(eh18v))
attributes(eh18v)$variable.labels
attributes(eh18v)$variable.labels
aux<-eh18v[,c("s01a_08"
"s01a_09"
"s01a_10")]
aux<-eh18v[,c("s01a_08", "s01a_09", "s01a_10")]
aux
library(fastDummies)
dummy_cols(aux)
bin<-dummy_cols(aux)
head(bin)
bin<-dummy_cols(aux)[,-c(1:3)]
library(FactoMineR)
PCA(bin,scale.unit = F)
table(aux$s01a_08)
table(aux$s01a_09)
table(aux$s01a_10)
explor(PCA(bin,scale.unit = F))
explor(MCA(aux))
explor(PCA(bin,scale.unit = F))
explor(MCA(aux))
aux<-eh18v[,c("s01a_08", "s01a_09")]
bin<-dummy_cols(aux)[,-c(1:2)]
explor(MCA(aux))
?PCA
63-34-17
77-34-12
77-34-12-18
77-34-18
