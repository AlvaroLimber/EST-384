#encuesta
sample(x,20)
#encuesta
sample(x,20)
#encuesta
sample(x,20)
#encuesta
s<-sample(x,20)
s
mean(x)
mean(x)
s
s
s
combn(10000000,20)
?combn()
choose(10000000,20)
s
mean(s)
# parámetro
mean(x)
s
mean(s)
# parámetro
mean(x)
s
#
mean(s)
s
#estimador
mean(s)
#estimador
mean(s)
# parámetro
mean(x)
#estimador
mean(s)
#estimador
mean(s)
#estimador
mean(s)
choose(10000000,20)
StartDate <- as.Date("2021-02-08")
EndDate <- as.Date("2021-06-24")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("martes","jueves","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
library(readxl)
aux<-read_excel("G:\\Mi unidad\\contenido_materias\\contenido2020.xlsx",sheet = "EST145")
aux<-cbind(aux,myWeekDays)
names(aux)[4]<-"Fecha"
knitr::kable(aux)
StartDate <- as.Date("2021-02-01")
EndDate <- as.Date("2021-06-17")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("lunes","miércoles","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
library(readxl)
aux<-read_excel("G:\\Mi unidad\\contenido_materias\\contenido2020.xlsx",sheet = "EST383rev")
aux<-cbind(aux,myWeekDays)
names(aux)[4]<-"Fecha"
aux
View(aux)
View(aux)
aux
StartDate <- as.Date("2021-02-08")
EndDate <- as.Date("2021-06-24")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("martes","jueves","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
library(readxl)
aux<-read_excel("G:\\Mi unidad\\contenido_materias\\contenido2020.xlsx",sheet = "EST145")
aux<-cbind(aux,myWeekDays)
names(aux)[4]<-"Fecha"
aux
View(aux)
StartDate <- as.Date("2021-02-01")
EndDate <- as.Date("2021-11-11")
myDays <- seq(StartDate , EndDate, by = "day")
#c("lunes","martes","miércoles","jueves","viernes", "sábado","domingo")
excludeDays <- c("lunes","miércoles","viernes", "sábado","domingo")
myWeekDays <- subset(myDays, !weekdays(myDays) %in% excludeDays)
myWeekDays<-myWeekDays[-c(49,50)]
library(readxl)
aux<-read_excel("G:\\Mi unidad\\contenido_materias\\contenido2020.xlsx",sheet = "EST228")
aux<-cbind(aux,myWeekDays)
names(aux)[4]<-"Fecha"
aux
View(aux)
aux
3*6*800
install.packages("rgl")
install.packages("htmltools")
library(rgl)
library(rgl)
f <- function(x, y) {
r <- sqrt(x^2 + y^2)
ifelse(r == 0, 10, 10 * sin(r)/r)
}
open3d()
plot3d(f, col = colorRampPalette(c("blue", "white", "red")),
xlab = "X", ylab = "Y", zlab = "Sinc( r )",
xlim = c(-10, 10), ylim = c(-10, 10),
aspect = c(1, 1, 0.5))
plot(f)
curve(f)
f <- function(x, y) {
r <- (1/4)*(x+y)*x*y*exp(-x-y)
}
open3d()
plot3d(f, col = colorRampPalette(c("blue", "white", "red")),
xlab = "X", ylab = "Y", zlab = "Sinc( r )",
xlim = c(0, 10), ylim = c(0, 10),
aspect = c(1, 1, 0.5))
plot3d(f, col = colorRampPalette(c("blue", "white", "red")),
xlab = "X", ylab = "Y", zlab = "f",
xlim = c(0, 10), ylim = c(0, 10),
aspect = c(1, 1, 0.5))
plot3d(f, col = colorRampPalette(c("blue", "white", "red")),
xlab = "X", ylab = "Y", zlab = "f",
xlim = c(0, 10), ylim = c(0, 10))
5*12*10
240/60
9500*2
23*300
23*300+15*300
23*300+16*300
16*300+16*300
25*300+16*300
12300+9500
25*300+25*300
15000+9500
90+58
90+58-20-29
90+58-20-29
?plot_ly
library(plotly)
?plot_ly
rm(list=ls())
library(flexdashboard)
library(ggplot2)
library(haven)
library(dplyr)
library(knitr)
library(labelled)
bd<-read_dta("C:\\Users\\ALVARO\\Box\\ipm_oruro\\_data\\bd_dashboard_oruro_v1.dta")
mpi_h<-bd %>% group_by(s0_1) %>% summarise(h=mean(`_mpi_h`,na.rm = T))
mpi_a<-bd %>% group_by(s0_1) %>% summarise(a=mean(`_mpi_a`,na.rm = T))
mpi_m0<-bd %>% group_by(s0_1) %>% summarise(m0=mean(`_mpi_m0`,na.rm = T))
dim<-bd %>% group_by(s0_1) %>% summarise_at(vars(dim_1:dim_11),mean,na.rm=T)
mindim<-bd %>% group_by(s0_1) %>% summarise_at(vars(dim_1:dim_11),min,na.rm=T)
maxdim<-bd %>% group_by(s0_1) %>% summarise_at(vars(dim_1:dim_11),max,na.rm=T)
dim
60*8
library(ggplot)
library(ggplot2)
geom_smooth
ggplot(1:10,rnorm(10))+geom_point()
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_smooth()
?geom_smooth()
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_lne()
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_line()
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_line(linetype=2)
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_line(linetype=3)
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_line(linetype=4)
?geom_line()
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_path()
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_path(linejoin = "bevel")
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_path(linejoin = "round")
ggplot(data.frame(X=1:10,Y=rnorm(10)),aes(X,Y))+geom_point()+geom_path(linejoin = "mitre")
library(vegan)
library(cluster)
library(help=vegan)
library(help=cluster)
?daisy
library(ggplot2)
library(treemapify)
library(treemap)
library(dplyr)
library(readxl)
read_excel("C:\\Users\\ALVARO\\Documents\\GitHub\\aru\\asignacion.xlsx")
read_excel("C:\\Users\\ALVARO\\Documents\\GitHub\\aru\\asignacion.xlsx",3)
bd<-read_excel("C:\\Users\\ALVARO\\Documents\\GitHub\\aru\\asignacion.xlsx",3)
bd %>% filter(mes="marzo")
bd %>% filter(mes=="marzo")
unique(bd$persona)
per<-unique(bd$persona)
bd %>% filter(mes=="marzo" & persona==per[i])
bd %>% filter(mes=="marzo" & persona==per[1])
ggplot(bd %>% filter(mes=="marzo" & persona==per[1]), aes(area = actividad, fill = tiempo, label = actividad))+geom_treemap()
bd %>% filter(mes=="marzo" & persona==per[1])->aux
ggplot(aux, aes(area = actividad, fill = tiempo, label = actividad))+geom_treemap()
data("GNI2014")
View(GNI2014)
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()
rm(list = ls())
library(vegan)
?dist
library(vegan)
library(help=vegan)
library(cluster)
library(help=cluster)
library(help=cluster)
?daisy
load(url('https://raw.githubusercontent.com/AlvaroLimber/EST-383/master/data/oct20.RData'))
library(dplyr)
library(cluster)
View(computo)
names(computo)
computo %>% rename(pais=País) %>% filter(pais="Bolivia")
computo %>% rename(pais=País) %>% filter(pais=="Bolivia")
View(computo)
computo %>% rename(pais=País,tipo=Elección) %>% filter(pais=="Bolivia" & tipo=="Presidente y Vicepresidente")
computo %>% rename(pais=País,tipo=Elección) %>% filter(pais=="Bolivia" & tipo=="Presidente y Vicepresidente") %>% group_by(Departamento,Provincia,Municipio) %>% summarise_at(vars(CC:`PAN-BOL`))
computo %>% rename(pais=País,tipo=Elección) %>% filter(pais=="Bolivia" & tipo=="Presidente y Vicepresidente") %>% group_by(Departamento,Provincia,Municipio) %>% summarise_at(vars(CC:`PAN-BOL`),sum)
bd<-computo %>% rename(pais=País,tipo=Elección) %>% filter(pais=="Bolivia" & tipo=="Presidente y Vicepresidente") %>% group_by(Departamento,Provincia,Municipio) %>% summarise_at(vars(CC:`PAN-BOL`),sum)
names(bd)
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
340/3
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
gk<-c(rep(1,113),rep(2,113),rep(3,114))
bd$gk<-gk
View(bd)
sample(1:k,nrow(bd))
#0. Definición del valor de $k$.
k<-3
sample(1:k,nrow(bd))
sample(1:k,nrow(bd),replace = T)
sample(1:k,nrow(bd),replace = T)
#0. Definición del valor de $k$.
k<-5
sample(1:k,nrow(bd),replace = T)
#0. Definición del valor de $k$.
k<-4
sample(1:k,nrow(bd),replace = T)
#0. Definición del valor de $k$.
k<-3
#1. Partición de las observaciones en $k$ grupos, obtener el vector de centros de cada grupo (centroides). Se puede trabajar con la media, la mediana o el medoide.
#gk<-c(rep(1,113),rep(2,113),rep(3,114))
gk<-sample(1:k,nrow(bd),replace = T)
bd$gk<-gk
bd %>% group_by(gk) %>% summarise_at(vars(CC:`PAN-BOL`),mean)
bd %>% group_by(gk) %>% summarise_at(vars(CC:`PAN-BOL`),median)
bd %>% group_by(gk) %>% summarise_at(vars(CC:`PAN-BOL`),mean)
bd %>% group_by(gk) %>% summarise_at(vars(CC:`PAN-BOL`),mean)->center
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
bd
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
bd[1,]
center
names(bd)
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
bd[1,4:12]
center[1,]
center[1,-1]
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
bd[1,4:12]
center[1,-1]
dist(bd[1,4:12],center[1,-1])
dist(t(bd[1,4:12]),t(center[1,-1]))
t(bd[1,4:12])
?dist
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
rbind(bd[1,4:12],center[1,-1])
dist(rbind(bd[1,4:12],center[1,-1]))
dist(rbind(bd[1,4:12],center[,-1]))
rbind(bd[1,4:12],center[,-1])
dist(rbind(bd[1,4:12],center[,-1]))
dist(rbind(bd[1,4:12],center[,-1]))[,1]
dist(rbind(bd[1,4:12],center[,-1]))
bd[1,]
View(bd[1,])
#2. Para cada observación calcular las distancia euclidiana (u otra) a los centroides y reasignar la observación en base a la menor distancia, re calcular los centroides en base a la re asignación de cada observación
dist(rbind(bd[1,4:12],center[,-1]))
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
?kmeans()
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
kmeans(bd[,4:12],3)
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
set.seed(2112)
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
set.seed(2112)
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
set.seed(2112)
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
set.seed(2112)
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
set.seed(2112)
m1<-kmeans(bd[,4:12],3)
m1$cluster
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
set.seed(2112)
m1<-kmeans(bd[,4:12],3)
m1$cluster
table(m1$cluster)
bd$gk<-m1$cluster
bd[,c(1:3,"gk")]
bd[,c("Municipio","gk")]
View(bd[,c("Municipio","gk")])
View(bd[bd$gk==1,c("Municipio","gk")])
View(bd[bd$gk==2,c("Municipio","gk")])
View(bd[bd$gk==3,c("Municipio","gk")])
table(m1$cluster)
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
set.seed(2116)
m1<-kmeans(bd[,4:12],3)
table(m1$cluster)
Viewer(bd[order(bd$CC),])
View(bd[order(bd$CC),])
bd<-computo %>% rename(pais=País,tipo=Elección) %>% filter(pais=="Bolivia" & tipo=="Presidente y Vicepresidente") %>% group_by(Departamento,Provincia,Municipio) %>% summarise_at(vars(CC:`PAN-BOL`),sum)
bd[,4:12]
prop.table(bd[,4:12],1)
prop.table(as.matrix(bd[,4:12]),1)
bd[,4:12]<-prop.table(as.matrix(bd[,4:12]),1)
View(bd)
#0. Definición del valor de $k$.
k<-3
#3. Repetir el paso 2 hasta que que ya no existan más re asignaciones
#R
set.seed(2116)
m1<-kmeans(bd[,4:12],3)
table(m1$cluster)
bd$gk<-m1$cluster
m1$centers
m2<-kmeans(bd[,4:12],10)
table(m2$cluster)
bd$gk2<-m2$cluster
m2$centers
dist(bd[,4:12])
dd<-dist(bd[,4:12])
silhouette(m1$cluster,dd)
silhouette(m2$cluster,dd)
s1<-silhouette(m1$cluster,dd)
s2<-silhouette(m2$cluster,dd)
s1[,3]
s2[,3]
mean(s1[,3])
mean(s2[,3])
plot(s1)
plot(s2)
plot(s1)
plot(s2)
pam
?pam
pam(bd[,4:12],10)
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()
library(ggplot2)
library(treemapify)
library(treemap)
library(dplyr)
library(readxl)
bd<-read_excel("C:\\Users\\ALVARO\\Documents\\GitHub\\aru\\asignacion.xlsx",3)
per<-unique(bd$persona)
bd %>% filter(mes=="marzo" & persona==per[1])->aux
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",
grow = TRUE)
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",grow = TRUE)
bd %>% filter(mes=="marzo" & persona==per[2])->aux
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",grow = TRUE)
bd %>% filter(mes=="marzo" & persona==per[1])->aux
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",grow = TRUE)
bd %>% filter(mes=="marzo" & persona==per[2])->aux
ggplot(aux, aes(area = tiempo, fill = tiempo, label = actividad))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",grow = TRUE)
ggplot(aux, aes(area = tiempo, fill = tiempo,
label = paste(actividad,tiempo)))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",grow = TRUE)
ggplot(aux, aes(area = tiempo, fill = tiempo,
label = paste0(actividad,"(",tiempo,"%)")))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",grow = TRUE)
ggplot(aux, aes(area = tiempo, fill = tiempo,
label = paste0(actividad,"(",tiempo,"%)")))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",grow = TRUE)+ggtitle(aux[1])
ggplot(aux, aes(area = tiempo, fill = tiempo,
label = paste0(actividad,"(",tiempo,"%)")))+geom_treemap()+  geom_treemap_text(fontface = "italic", colour = "white", place = "centre",grow = TRUE)+ggtitle(per[1])
x<-"Hola a todos, ¿Cómo están?. Hoy es 17 de marzo"
x
class(x)
nchar(x)
paste(x,", chau")
paste0(x,", chau")
gsub("Hola","xxx",x)
gsub("a","xxx",x)
grep("Hola",x)
grep("ppHola",x)
grep("Hoy",x)
grep("Ayer",x)
tolower(x)
toupper(x)
library(tm)
#install.packages("tm")
library(tm)
library(help=tm)
removeNumbers(x)
removePunctuation(x)
?removePunctuation()
removeWords(x,c("¿"))
removeWords(x,c("\¿"))
removeWords(x,c("\\¿"))
removeWords(x,c("¿"))
removeWords(x,c("¿"))
removeWords(x,c("Hoy"))
removeWords(x,c("Hoy","marzo"))
stopwords()
?stopwords()
stopwords("es")
removeWords(x,stopwords("es"))
removeWords(tolower(x),stopwords("es"))
removeWords(toupper(x),stopwords("es"))
removeWords(toupper(x),stopwords("es"))
removeWords(toupper(x),stopwords("es"))
removeWords(tolower(x),stopwords("es"))
setwd("C:\\Users\\ALVARO\\Documents\\GitHub\\EST-384\\data\\pdf")
dir()
#Colección de documentos: mismo formato, palabras sean seleccionables
library(pdftools)
dir<-"C:\\Users\\ALVARO\\Documents\\GitHub\\EST-384\\data\\pdf"
'VCorpus
?VCorpus
?readPDF
pdfdocs <- VCorpus(DirSource(dir, pattern = ".pdf"),
readerControl = list(reader = readPDF))
class(pdfdocs)
View(pdfdocs)
pdfdocs[["T-075.pdf"]][["content"]]
#API Twitter
library(rtweet)
tw<-search_tweets("Bolivia",n=1000,include_rts = F)
?search_tweets()
View(tw)
table(tw$screen_name)
sort(table(tw$screen_name))
sort(table(tw$screen_name))
tw$text
VectorSource(tw$text)
twc<-Corpus(VectorSource(tw$text))
library(wordcloud2)
library(dplyr)
twc %>% tm_map(removeNumbers)
twc<-twc %>% tm_map(removeNumbers) %>% tm_map(removePunctuation) %>% tm_map(stripWhitespace) %>% tm_map(content_transformer(tolower))
stopwords("es")
stopwords("sp")
twc<-tm_map(twc,removeWords,stopwords("es"))
mtwc<-TermDocumentMatrix(twc)
matriz_tw<-as.matrix(mtwc)
View(matriz_tw)
rowSums(matriz_tw)
palabras<-sort(rowSums(matriz_tw),decreasing = T)
head(palabras)
df<-data.frame(words=names(palabras),freq=palabras)
head(df)
wordcloud2(df)
wordcloud2(df[-1,])
?wordcloud2(df[-1,])
?wordcloud2(df[-1,],shape="star")
wordcloud2(df[-1,],shape="star")
tw$text[15]
tw$text[20]
library(syuzhet)
#léxico
get_sentiment_dictionary("nrc",language = "spanish")
#léxico
lx<-get_sentiment_dictionary("nrc",language = "spanish")
head(lx)
View(lx)
#sentimientos
as<-get_nrc_sentiment(tw$text,language = "spanish")
View(as)
apply(as[,1:8],2,sum)
barplot(apply(as[,1:8],2,sum),horiz = T)
barplot(apply(as[,1:8],2,sum),horiz = T,las=1)
barplot(apply(as[,9:10],2,sum),horiz = T,las=1)
View(as)
